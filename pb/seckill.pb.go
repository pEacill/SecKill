// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: seckill.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecRequest struct {
	ProductId     int64  `protobuf:"varint,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	Source        string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	AuthCode      string `protobuf:"bytes,3,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	SecTime       string `protobuf:"bytes,4,opt,name=SecTime,proto3" json:"SecTime,omitempty"`
	Nance         string `protobuf:"bytes,5,opt,name=Nance,proto3" json:"Nance,omitempty"`
	UserId        int64  `protobuf:"varint,6,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserAuthSign  string `protobuf:"bytes,7,opt,name=UserAuthSign,proto3" json:"UserAuthSign,omitempty"`
	AccessTime    int64  `protobuf:"varint,8,opt,name=AccessTime,proto3" json:"AccessTime,omitempty"`
	ClientAddr    string `protobuf:"bytes,9,opt,name=ClientAddr,proto3" json:"ClientAddr,omitempty"`
	ClientRefence string `protobuf:"bytes,10,opt,name=ClientRefence,proto3" json:"ClientRefence,omitempty"`
}

func (m *SecRequest) Reset()         { *m = SecRequest{} }
func (m *SecRequest) String() string { return proto.CompactTextString(m) }
func (*SecRequest) ProtoMessage()    {}
func (*SecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1202afb06d2a3a7a, []int{0}
}
func (m *SecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecRequest.Merge(m, src)
}
func (m *SecRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecRequest proto.InternalMessageInfo

func (m *SecRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *SecRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SecRequest) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *SecRequest) GetSecTime() string {
	if m != nil {
		return m.SecTime
	}
	return ""
}

func (m *SecRequest) GetNance() string {
	if m != nil {
		return m.Nance
	}
	return ""
}

func (m *SecRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SecRequest) GetUserAuthSign() string {
	if m != nil {
		return m.UserAuthSign
	}
	return ""
}

func (m *SecRequest) GetAccessTime() int64 {
	if m != nil {
		return m.AccessTime
	}
	return 0
}

func (m *SecRequest) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *SecRequest) GetClientRefence() string {
	if m != nil {
		return m.ClientRefence
	}
	return ""
}

type SecResponse struct {
	ProductId int64  `protobuf:"varint,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	TokenTime int64  `protobuf:"varint,4,opt,name=TokenTime,proto3" json:"TokenTime,omitempty"`
	Code      int64  `protobuf:"varint,5,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *SecResponse) Reset()         { *m = SecResponse{} }
func (m *SecResponse) String() string { return proto.CompactTextString(m) }
func (*SecResponse) ProtoMessage()    {}
func (*SecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1202afb06d2a3a7a, []int{1}
}
func (m *SecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecResponse.Merge(m, src)
}
func (m *SecResponse) XXX_Size() int {
	return m.Size()
}
func (m *SecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SecResponse proto.InternalMessageInfo

func (m *SecResponse) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *SecResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SecResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SecResponse) GetTokenTime() int64 {
	if m != nil {
		return m.TokenTime
	}
	return 0
}

func (m *SecResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type Activity struct {
	ActivityId   int64   `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ActivityName string  `protobuf:"bytes,2,opt,name=ActivityName,proto3" json:"ActivityName,omitempty"`
	ProductId    int64   `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	StartTime    int64   `protobuf:"varint,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime      int64   `protobuf:"varint,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Total        int64   `protobuf:"varint,6,opt,name=Total,proto3" json:"Total,omitempty"`
	Status       int64   `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`
	StartTimeStr string  `protobuf:"bytes,8,opt,name=StartTimeStr,proto3" json:"StartTimeStr,omitempty"`
	EndTimeStr   string  `protobuf:"bytes,9,opt,name=EndTimeStr,proto3" json:"EndTimeStr,omitempty"`
	StatusStr    string  `protobuf:"bytes,10,opt,name=StatusStr,proto3" json:"StatusStr,omitempty"`
	Speed        int64   `protobuf:"varint,11,opt,name=Speed,proto3" json:"Speed,omitempty"`
	BuyLimit     int64   `protobuf:"varint,12,opt,name=BuyLimit,proto3" json:"BuyLimit,omitempty"`
	BuyRate      float64 `protobuf:"fixed64,13,opt,name=BuyRate,proto3" json:"BuyRate,omitempty"`
}

func (m *Activity) Reset()         { *m = Activity{} }
func (m *Activity) String() string { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()    {}
func (*Activity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1202afb06d2a3a7a, []int{2}
}
func (m *Activity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Activity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Activity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Activity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activity.Merge(m, src)
}
func (m *Activity) XXX_Size() int {
	return m.Size()
}
func (m *Activity) XXX_DiscardUnknown() {
	xxx_messageInfo_Activity.DiscardUnknown(m)
}

var xxx_messageInfo_Activity proto.InternalMessageInfo

func (m *Activity) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *Activity) GetActivityName() string {
	if m != nil {
		return m.ActivityName
	}
	return ""
}

func (m *Activity) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Activity) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Activity) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Activity) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Activity) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Activity) GetStartTimeStr() string {
	if m != nil {
		return m.StartTimeStr
	}
	return ""
}

func (m *Activity) GetEndTimeStr() string {
	if m != nil {
		return m.EndTimeStr
	}
	return ""
}

func (m *Activity) GetStatusStr() string {
	if m != nil {
		return m.StatusStr
	}
	return ""
}

func (m *Activity) GetSpeed() int64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Activity) GetBuyLimit() int64 {
	if m != nil {
		return m.BuyLimit
	}
	return 0
}

func (m *Activity) GetBuyRate() float64 {
	if m != nil {
		return m.BuyRate
	}
	return 0
}

type SecProductInfoConf struct {
	ProductId         int64   `protobuf:"varint,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	StartTime         int64   `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime           int64   `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Status            int64   `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Total             int64   `protobuf:"varint,5,opt,name=Total,proto3" json:"Total,omitempty"`
	Left              int64   `protobuf:"varint,6,opt,name=Left,proto3" json:"Left,omitempty"`
	OnePersonBuyLimit int64   `protobuf:"varint,7,opt,name=OnePersonBuyLimit,proto3" json:"OnePersonBuyLimit,omitempty"`
	BuyRate           float64 `protobuf:"fixed64,8,opt,name=BuyRate,proto3" json:"BuyRate,omitempty"`
	SoldMaxLimit      int64   `protobuf:"varint,9,opt,name=SoldMaxLimit,proto3" json:"SoldMaxLimit,omitempty"`
}

func (m *SecProductInfoConf) Reset()         { *m = SecProductInfoConf{} }
func (m *SecProductInfoConf) String() string { return proto.CompactTextString(m) }
func (*SecProductInfoConf) ProtoMessage()    {}
func (*SecProductInfoConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_1202afb06d2a3a7a, []int{3}
}
func (m *SecProductInfoConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecProductInfoConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecProductInfoConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecProductInfoConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecProductInfoConf.Merge(m, src)
}
func (m *SecProductInfoConf) XXX_Size() int {
	return m.Size()
}
func (m *SecProductInfoConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SecProductInfoConf.DiscardUnknown(m)
}

var xxx_messageInfo_SecProductInfoConf proto.InternalMessageInfo

func (m *SecProductInfoConf) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *SecProductInfoConf) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SecProductInfoConf) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SecProductInfoConf) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SecProductInfoConf) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *SecProductInfoConf) GetLeft() int64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *SecProductInfoConf) GetOnePersonBuyLimit() int64 {
	if m != nil {
		return m.OnePersonBuyLimit
	}
	return 0
}

func (m *SecProductInfoConf) GetBuyRate() float64 {
	if m != nil {
		return m.BuyRate
	}
	return 0
}

func (m *SecProductInfoConf) GetSoldMaxLimit() int64 {
	if m != nil {
		return m.SoldMaxLimit
	}
	return 0
}

func init() {
	proto.RegisterType((*SecRequest)(nil), "pb.SecRequest")
	proto.RegisterType((*SecResponse)(nil), "pb.SecResponse")
	proto.RegisterType((*Activity)(nil), "pb.Activity")
	proto.RegisterType((*SecProductInfoConf)(nil), "pb.SecProductInfoConf")
}

func init() { proto.RegisterFile("seckill.proto", fileDescriptor_1202afb06d2a3a7a) }

var fileDescriptor_1202afb06d2a3a7a = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0xa4, 0x8d, 0xa7, 0x4d, 0x11, 0xab, 0x0a, 0xad, 0xaa, 0xca, 0x8a, 0x2c, 0x0e,
	0x39, 0x54, 0x39, 0xc0, 0x1d, 0x29, 0x89, 0x38, 0x54, 0x94, 0x52, 0xd9, 0xe5, 0x07, 0x38, 0xeb,
	0x09, 0x58, 0x75, 0xec, 0x60, 0xaf, 0x2b, 0x72, 0xe3, 0xce, 0x85, 0x23, 0x3f, 0x83, 0x9f, 0xc1,
	0xb1, 0x47, 0x8e, 0x28, 0xf9, 0x23, 0x68, 0x67, 0xfd, 0x09, 0x12, 0xbd, 0xcd, 0x7b, 0x63, 0xcf,
	0xce, 0x7b, 0x6f, 0x6d, 0x18, 0xe5, 0x28, 0xee, 0xa2, 0x38, 0x9e, 0x6e, 0xb2, 0x54, 0xa6, 0xcc,
	0xdc, 0x2c, 0xdd, 0x1f, 0x26, 0x80, 0x8f, 0xc2, 0xc3, 0x4f, 0x05, 0xe6, 0x92, 0x9d, 0x83, 0x7d,
	0x93, 0xa5, 0x61, 0x21, 0xe4, 0x65, 0xc8, 0x8d, 0xb1, 0x31, 0xb1, 0xbc, 0x86, 0x60, 0xcf, 0xe0,
	0xc0, 0x4f, 0x8b, 0x4c, 0x20, 0x37, 0xc7, 0xc6, 0xc4, 0xf6, 0x4a, 0xc4, 0xce, 0x60, 0x38, 0x2b,
	0xe4, 0xc7, 0x45, 0x1a, 0x22, 0xb7, 0xa8, 0x53, 0x63, 0xc6, 0xe1, 0xd0, 0x47, 0x71, 0x1b, 0xad,
	0x91, 0xf7, 0xa9, 0x55, 0x41, 0x76, 0x0a, 0x83, 0xeb, 0x20, 0x11, 0xc8, 0x07, 0xc4, 0x6b, 0xa0,
	0xce, 0x78, 0x9f, 0x63, 0x76, 0x19, 0xf2, 0x03, 0x3a, 0xbe, 0x44, 0xcc, 0x85, 0x63, 0x55, 0xa9,
	0xb9, 0x7e, 0xf4, 0x21, 0xe1, 0x87, 0xf4, 0x52, 0x87, 0x63, 0x0e, 0xc0, 0x4c, 0x08, 0xcc, 0x73,
	0x3a, 0x6e, 0x48, 0xef, 0xb7, 0x18, 0xd5, 0x5f, 0xc4, 0x11, 0x26, 0x72, 0x16, 0x86, 0x19, 0xb7,
	0x69, 0x42, 0x8b, 0x61, 0xcf, 0x61, 0xa4, 0x91, 0x87, 0x2b, 0x54, 0x9b, 0x01, 0x3d, 0xd2, 0x25,
	0xdd, 0xaf, 0x06, 0x1c, 0x91, 0x65, 0xf9, 0x26, 0x4d, 0x72, 0x7c, 0xdc, 0xb3, 0x52, 0x8f, 0xd9,
	0xd1, 0x73, 0x0a, 0x83, 0xdb, 0xf4, 0x0e, 0x93, 0xd2, 0x30, 0x0d, 0xd4, 0x2c, 0x2a, 0x6a, 0xbf,
	0x2c, 0xaf, 0x21, 0x18, 0x83, 0x3e, 0x79, 0x3c, 0xa0, 0x06, 0xd5, 0xee, 0x17, 0x0b, 0x86, 0x33,
	0x21, 0xa3, 0xfb, 0x48, 0x6e, 0xb5, 0x01, 0xba, 0xae, 0x77, 0x69, 0x31, 0xca, 0xc4, 0x0a, 0x5d,
	0x07, 0xeb, 0x2a, 0xc6, 0x0e, 0xd7, 0x95, 0x63, 0xfd, 0x2d, 0xe7, 0x1c, 0x6c, 0x5f, 0x06, 0x99,
	0x6c, 0x2f, 0x58, 0x13, 0x2a, 0xec, 0xd7, 0x49, 0x48, 0x3d, 0xbd, 0x63, 0x05, 0xb5, 0x5c, 0x19,
	0xc4, 0x65, 0xaa, 0x1a, 0xd0, 0x85, 0x92, 0x81, 0x2c, 0x72, 0x8a, 0xd3, 0xf2, 0x4a, 0xa4, 0xf6,
	0xac, 0x87, 0xfa, 0x32, 0xa3, 0x28, 0x6d, 0xaf, 0xc3, 0x29, 0xad, 0xe5, 0x70, 0xf5, 0x44, 0x19,
	0x66, 0xc3, 0x94, 0x9b, 0xca, 0x22, 0x57, 0x6d, 0x1d, 0x64, 0x43, 0xa8, 0x7d, 0xfc, 0x0d, 0x62,
	0xc8, 0x8f, 0xf4, 0x3e, 0x04, 0xd4, 0x45, 0x9e, 0x17, 0xdb, 0xab, 0x68, 0x1d, 0x49, 0x7e, 0x4c,
	0x8d, 0x1a, 0x2b, 0x6d, 0xf3, 0x62, 0xeb, 0x05, 0x12, 0xf9, 0x68, 0x6c, 0x4c, 0x0c, 0xaf, 0x82,
	0xee, 0x77, 0x13, 0x98, 0x8f, 0xa2, 0x32, 0x29, 0x59, 0xa5, 0x8b, 0x34, 0x59, 0x3d, 0x72, 0x2f,
	0x3a, 0x46, 0x9a, 0xff, 0x31, 0xd2, 0xea, 0x1a, 0xd9, 0x58, 0xd6, 0xef, 0x58, 0x56, 0x1b, 0x3c,
	0x68, 0x1b, 0xcc, 0xa0, 0x7f, 0x85, 0x2b, 0x59, 0xba, 0x4e, 0x35, 0xbb, 0x80, 0xa7, 0xef, 0x12,
	0xbc, 0xc1, 0x2c, 0x4f, 0x93, 0x5a, 0xad, 0xf6, 0xff, 0xdf, 0x46, 0x5b, 0xf6, 0xb0, 0x23, 0x9b,
	0x42, 0x4a, 0xe3, 0xf0, 0x6d, 0xf0, 0x59, 0x8f, 0xb0, 0x69, 0x44, 0x87, 0x7b, 0xf1, 0x0a, 0x4e,
	0x7c, 0x14, 0x6f, 0xa2, 0x38, 0xf6, 0x31, 0xbb, 0x8f, 0x04, 0xb2, 0x0b, 0x38, 0xcc, 0x35, 0xc3,
	0x4e, 0xa6, 0x9b, 0xe5, 0xb4, 0xf9, 0xf9, 0x9c, 0x3d, 0xa9, 0xb1, 0xfe, 0xb2, 0xdc, 0xde, 0x9c,
	0xff, 0xdc, 0x39, 0xc6, 0xc3, 0xce, 0x31, 0x7e, 0xef, 0x1c, 0xe3, 0xdb, 0xde, 0xe9, 0x3d, 0xec,
	0x9d, 0xde, 0xaf, 0xbd, 0xd3, 0x5b, 0x1e, 0xd0, 0x3f, 0xec, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xee, 0x7f, 0xc5, 0x8e, 0xd4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SecKillServiceClient is the client API for SecKillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecKillServiceClient interface {
	SecKill(ctx context.Context, in *SecRequest, opts ...grpc.CallOption) (*SecResponse, error)
}

type secKillServiceClient struct {
	cc *grpc.ClientConn
}

func NewSecKillServiceClient(cc *grpc.ClientConn) SecKillServiceClient {
	return &secKillServiceClient{cc}
}

func (c *secKillServiceClient) SecKill(ctx context.Context, in *SecRequest, opts ...grpc.CallOption) (*SecResponse, error) {
	out := new(SecResponse)
	err := c.cc.Invoke(ctx, "/pb.SecKillService/secKill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecKillServiceServer is the server API for SecKillService service.
type SecKillServiceServer interface {
	SecKill(context.Context, *SecRequest) (*SecResponse, error)
}

// UnimplementedSecKillServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSecKillServiceServer struct {
}

func (*UnimplementedSecKillServiceServer) SecKill(ctx context.Context, req *SecRequest) (*SecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecKill not implemented")
}

func RegisterSecKillServiceServer(s *grpc.Server, srv SecKillServiceServer) {
	s.RegisterService(&_SecKillService_serviceDesc, srv)
}

func _SecKillService_SecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServiceServer).SecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SecKillService/SecKill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServiceServer).SecKill(ctx, req.(*SecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecKillService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SecKillService",
	HandlerType: (*SecKillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "secKill",
			Handler:    _SecKillService_SecKill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill.proto",
}

func (m *SecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientRefence) > 0 {
		i -= len(m.ClientRefence)
		copy(dAtA[i:], m.ClientRefence)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.ClientRefence)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ClientAddr) > 0 {
		i -= len(m.ClientAddr)
		copy(dAtA[i:], m.ClientAddr)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.ClientAddr)))
		i--
		dAtA[i] = 0x4a
	}
	if m.AccessTime != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.AccessTime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UserAuthSign) > 0 {
		i -= len(m.UserAuthSign)
		copy(dAtA[i:], m.UserAuthSign)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.UserAuthSign)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UserId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nance) > 0 {
		i -= len(m.Nance)
		copy(dAtA[i:], m.Nance)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.Nance)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecTime) > 0 {
		i -= len(m.SecTime)
		copy(dAtA[i:], m.SecTime)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.SecTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x28
	}
	if m.TokenTime != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.TokenTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Activity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuyRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BuyRate))))
		i--
		dAtA[i] = 0x69
	}
	if m.BuyLimit != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.BuyLimit))
		i--
		dAtA[i] = 0x60
	}
	if m.Speed != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x58
	}
	if len(m.StatusStr) > 0 {
		i -= len(m.StatusStr)
		copy(dAtA[i:], m.StatusStr)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.StatusStr)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EndTimeStr) > 0 {
		i -= len(m.EndTimeStr)
		copy(dAtA[i:], m.EndTimeStr)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.EndTimeStr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StartTimeStr) > 0 {
		i -= len(m.StartTimeStr)
		copy(dAtA[i:], m.StartTimeStr)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.StartTimeStr)))
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.Total != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTime != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ProductId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintSeckill(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SecProductInfoConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecProductInfoConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecProductInfoConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SoldMaxLimit != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.SoldMaxLimit))
		i--
		dAtA[i] = 0x48
	}
	if m.BuyRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BuyRate))))
		i--
		dAtA[i] = 0x41
	}
	if m.OnePersonBuyLimit != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.OnePersonBuyLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.Left != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Left))
		i--
		dAtA[i] = 0x30
	}
	if m.Total != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTime != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintSeckill(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSeckill(dAtA []byte, offset int, v uint64) int {
	offset -= sovSeckill(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovSeckill(uint64(m.ProductId))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	l = len(m.SecTime)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	l = len(m.Nance)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSeckill(uint64(m.UserId))
	}
	l = len(m.UserAuthSign)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	if m.AccessTime != 0 {
		n += 1 + sovSeckill(uint64(m.AccessTime))
	}
	l = len(m.ClientAddr)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	l = len(m.ClientRefence)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	return n
}

func (m *SecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovSeckill(uint64(m.ProductId))
	}
	if m.UserId != 0 {
		n += 1 + sovSeckill(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	if m.TokenTime != 0 {
		n += 1 + sovSeckill(uint64(m.TokenTime))
	}
	if m.Code != 0 {
		n += 1 + sovSeckill(uint64(m.Code))
	}
	return n
}

func (m *Activity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovSeckill(uint64(m.ActivityId))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	if m.ProductId != 0 {
		n += 1 + sovSeckill(uint64(m.ProductId))
	}
	if m.StartTime != 0 {
		n += 1 + sovSeckill(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovSeckill(uint64(m.EndTime))
	}
	if m.Total != 0 {
		n += 1 + sovSeckill(uint64(m.Total))
	}
	if m.Status != 0 {
		n += 1 + sovSeckill(uint64(m.Status))
	}
	l = len(m.StartTimeStr)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	l = len(m.EndTimeStr)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	l = len(m.StatusStr)
	if l > 0 {
		n += 1 + l + sovSeckill(uint64(l))
	}
	if m.Speed != 0 {
		n += 1 + sovSeckill(uint64(m.Speed))
	}
	if m.BuyLimit != 0 {
		n += 1 + sovSeckill(uint64(m.BuyLimit))
	}
	if m.BuyRate != 0 {
		n += 9
	}
	return n
}

func (m *SecProductInfoConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovSeckill(uint64(m.ProductId))
	}
	if m.StartTime != 0 {
		n += 1 + sovSeckill(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovSeckill(uint64(m.EndTime))
	}
	if m.Status != 0 {
		n += 1 + sovSeckill(uint64(m.Status))
	}
	if m.Total != 0 {
		n += 1 + sovSeckill(uint64(m.Total))
	}
	if m.Left != 0 {
		n += 1 + sovSeckill(uint64(m.Left))
	}
	if m.OnePersonBuyLimit != 0 {
		n += 1 + sovSeckill(uint64(m.OnePersonBuyLimit))
	}
	if m.BuyRate != 0 {
		n += 9
	}
	if m.SoldMaxLimit != 0 {
		n += 1 + sovSeckill(uint64(m.SoldMaxLimit))
	}
	return n
}

func sovSeckill(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSeckill(x uint64) (n int) {
	return sovSeckill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeckill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAuthSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAuthSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTime", wireType)
			}
			m.AccessTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientRefence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientRefence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeckill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeckill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeckill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTime", wireType)
			}
			m.TokenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeckill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeckill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeckill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeckill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeckill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyLimit", wireType)
			}
			m.BuyLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BuyRate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSeckill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeckill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecProductInfoConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeckill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecProductInfoConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecProductInfoConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnePersonBuyLimit", wireType)
			}
			m.OnePersonBuyLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnePersonBuyLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BuyRate = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldMaxLimit", wireType)
			}
			m.SoldMaxLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldMaxLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeckill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeckill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeckill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeckill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeckill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSeckill
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSeckill
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSeckill
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSeckill        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeckill          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSeckill = fmt.Errorf("proto: unexpected end of group")
)
